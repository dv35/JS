React is often mentioned in the same breath as other Javascript frameworks, but "React vs Angular" doesn't make 
sense because they aren't directly comparable things. Angular is a complete framework (including a view layer), React is not.

React gives you a template language and some function hooks to essentially render HTML. That's all React outputs, HTML. 
Your bundles of HTML / Javascript, called "components", are allowed things like storing their own internal state in 
memory (such as which tab is selected in a tab view), but in the end you just output HTML. You absolutely cannot build 
a fully functional dynamic application with React alone.

Benefits of React

1.	You can always tell how your component will render by looking at one source file.
2.	Bundling Javascript and HTML into JSX makes components easily understandable.
3.	You can render React on the server.

No so beneficial side: 

1. You DO NOT GET any of the following:

        •	An event system (other than vanilla DOM events)
        •	Any AJAX capabilities whatsoever
        •	Any form of a data layer
        •	Promises
        •	Any application framework at all
        •	Any idea how implement the above
        
2. React is large for how little you get, including how little cross browser support.

React is about 35 KB gzipped over the wire.
React is a comparable size with Angular, even though Angular is a complete application framework. 
React is frankly bloated for how little functionality you get. 

***** Props

Props take on several roles:

1. Props can become HTML attributes. If a prop matches a known HTML attribute then it will be added to the final HTML element in the DOM.
2. Props passed to createElement() become values stored in a prop object as an instance property of React.createElement() 
        instances (i.e., [INSTANCE].props.[NAME OF PROP]). Props by and large are used to input values into components.
3. A few special props have side effects (e.g., key, ref, and dangerouslySetInnerHTML)

***** HTML Doc using React.

An example of an HTML document properly including React is shown below.

                <!DOCTYPE html>
                <html>
                  <head>
                    <script src="https://fb.me/react-15.2.0.js"></script>
                    <script src="https://fb.me/react-dom-15.2.0.js"></script>
                  </head>
                <body>
                </body>
                </html>
                
Note- Don't make the <body> element the root node for your React app. Always put a root <div> into <body>, give it 
an ID, and render into it. This gives React its own pool to play in without worrying about what else potentially wants 
to make changes to the children of the <body> element.

***** JSX Via Babel

Instead of writing the following, which uses React.createElement():

        return React.createElement('div',null,'Hello ',this.props.name);
        
Using JSX, you can write this:

        return <div>Hello {this.props.name}</div>;
