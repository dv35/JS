***Background: Static Versus Dynamic

There are two angles from which you can examine the workings of a program:

Statically (or lexically)

 You examine the program as it exists in source code, without running it. Given the following code, we can make the static assertion that function g is nested inside function f:

    function f() {
        function g() {
        }
    }

    The adjective lexical is used synonymously with static, because both pertain to the lexicon (the words, the source) of the program.

Dynamically

    You examine what happens while executing the program (“at runtime”). Given the following code:

    function g() {
    }
    function f() {
        g();
    }

    when we call f(), it calls g(). During runtime, g being called by f represents a dynamic relationship.

***The Scope of a variable

The scope of a variable are the locations where it is accessible. For example: 
    function foo() {
        var x;
    }
    
Here, the direct scope of x is the function foo().

Lexical scoping - Variables in JavaScript are lexically scoped, so the static structure of a program determines 
the scope of a variable (it is not influenced by, say, where a function is called from).

Nested scopes  - If scopes are nested within the direct scope of a variable, then the variable is accessible in 
all of those scopes. Example:

      function foo(arg) {
          function bar() {
              console.log('arg: '+arg);
          }
          bar();
      }
      console.log(foo('hello')); // arg: hello

The direct scope of arg is foo(), but it is also accessible in the nested scope bar(). With regard to nesting, foo() is the outer scope and bar() is the inner scope.
Shadowing - If a scope declares a variable that has the same name as one in a surrounding scope, access to the outer variable is blocked in the inner scope and all scopes nested inside it. Changes to the inner variable do not affect the outer variable, which is accessible again after the inner scope is left. Example:

      var x = "global";
      function f() {
          var x = "local";
          console.log(x); // local
      }
      f();
      console.log(x); // global

Inside the function f(), the global x is shadowed by a local x.

JavaScript’s variables are function-scoped: only functions introduce new scopes; blocks are ignored when it comes to scoping. For example:

function main() {
    { // block starts
        var foo = 4;
    } // block ends
    console.log(foo); // 4
}

Put another way, foo is accessible within all of main(), not just inside the block.
Assigning to an Undeclared Variable Makes It Global.
In sloppy mode, assigning to a variable that hasn’t been declared via var creates a global variable: 

      function sloppyFunc() { 
      x = 123 
      }
      sloppyFunc()
      x
      123

Thankfully, strict mode throws an exception when that happens:

      function strictFunc() { 'use strict'; x = 123 }
      strictFunc()
      ReferenceError: x is not defined
