Hoisting

In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.

Hoisting is JavaScript's default behavior of moving all declarations 
to the top of the current scope (to the top of the current script or 
the current function).

To avoid bugs, always declare all variables at the beginning of every scope.
Since this is how JavaScript interprets the code, it is always a good rule. 

Keep in mind that JavaScript in strict mode does not allow variables to be 
used if they are not declared.

****JavaScript only hoists declarations, not initializations!****

Here is a comparison:

              Example 1 does not give the same result as Example 2:

              Example 1

              var x = 3; // Initialize x
              var y = 5; // Initialize y

              elem = document.getElementById("demo"); // Find an element
              elem.innerHTML = x + " " + y;           // Display x and y

              Example 2

              var x = 3; // Initialize x

              elem = document.getElementById("demo"); // Find an element
              elem.innerHTML = x + " " + y;           // Display x and y

              var y = 5; // Initialize y 

y is undefined in the last example. This is because only the 
declaration (var y), not the initialization (=7) is hoisted to the top.
Because of hoisting, y has been declared before it is used, 
but because initializations are not hoisted, the value of y is undefined.
Example 2 is the same as writing:

              var x = 3; // Initialize x
              var y;     // Declare y

              elem = document.getElementById("demo"); // Find an element
              elem.innerHTML = x + " " + y;           // Display x and y

              y = 5;    // Assign 5 to y 
              
              
